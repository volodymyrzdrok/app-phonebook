{"version":3,"file":"static/js/354.6b1ba7ec.chunk.js","mappings":"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","sources":["hooks/useRouteRedirect.js","components/Filter/Filter.jsx","components/ContactForm/ContactForm.jsx","components/UpdateModal/UpdateModal.jsx","components/ContactList/ContactList.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\n\nimport { selectAuthStatus } from 'redux/auth/authSlise';\n\nexport const useRouteRedirect = (statusBool, pathName) => {\n  const navigate = useNavigate();\n  const authStatus = useSelector(selectAuthStatus);\n\n  useEffect(() => {\n    if (authStatus === statusBool) {\n      navigate(pathName, { replace: true });\n    }\n  }, [navigate, authStatus, pathName, statusBool]);\n};\n","import { useDispatch } from 'react-redux';\nimport { changeFilterValue } from 'redux/contacts/contactsSlice';\nimport { CssVarsProvider, FormControl, FormLabel, Input } from '@mui/joy';\nimport PersonSearchIcon from '@mui/icons-material/PersonSearch';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const changeFilterValueFunc = e => {\n    const value = e.target.value.trim().toLowerCase();\n    dispatch(changeFilterValue(value));\n  };\n\n  return (\n    <CssVarsProvider>\n      <FormControl\n        sx={{\n          width: 350,\n          mx: 'auto',\n          my: 4,\n          py: 1,\n          px: 2,\n          display: 'flex',\n          flexDirection: 'column',\n          gap: 2,\n          borderRadius: 'sx',\n          boxShadow: 'md',\n        }}\n        variant=\"outlined\"\n      >\n        <FormLabel>\n          Filter Contacts\n          <PersonSearchIcon\n            sx={{\n              fontSize: 30,\n              mx: 3,\n            }}\n          />\n        </FormLabel>\n        <Input\n          onInput={changeFilterValueFunc}\n          type=\"text\"\n          placeholder=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          required\n        />\n      </FormControl>\n    </CssVarsProvider>\n  );\n};\n\nexport default Filter;\n","import { useDispatch, useSelector } from 'react-redux';\nimport AddIcon from '@mui/icons-material/Add';\nimport PersonOutlineIcon from '@mui/icons-material/PersonOutline';\nimport TtyIcon from '@mui/icons-material/Tty';\nimport {\n  Sheet,\n  FormControl,\n  FormLabel,\n  Input,\n  Button,\n  Typography,\n  CssVarsProvider,\n} from '@mui/joy';\nimport { addOneContact } from 'redux/contacts/contactsOperations';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { selectContacts } from 'redux/contacts/contactsSlice';\n\nconst SignupSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!')\n    .matches(\n      \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\",\n      'only letters!'\n    )\n    .required('Required'),\n  number: Yup.number()\n    .typeError(\"That doesn't look like a phone number\")\n    .positive(\"A phone number can't start with a minus\")\n    .integer(\"A phone number can't include a decimal point\")\n    .min(8)\n    .required('A phone number is required'),\n});\n\nconst ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      number: '',\n    },\n    validationSchema: SignupSchema,\n    onSubmit: values => {\n      const foundEl = contacts.find(\n        el => el.name.toLowerCase() === values.name.toLowerCase()\n      );\n      if (foundEl) {\n        toast.info(`${foundEl.name} is already in contacts`, settingAlert());\n      } else {\n        dispatch(addOneContact(values));\n        formik.resetForm();\n      }\n    },\n  });\n\n  const { errors, touched } = formik;\n\n  return (\n    <CssVarsProvider>\n      <Sheet\n        onSubmit={formik.handleSubmit}\n        component=\"form\"\n        sx={{\n          width: 350,\n          mx: 'auto',\n          my: 4,\n          py: 3,\n          px: 2,\n          display: 'flex',\n          flexDirection: 'column',\n          gap: 2,\n          borderRadius: 'sx',\n          boxShadow: 'md',\n        }}\n        variant=\"outlined\"\n      >\n        <Typography sx={{ mx: 'auto' }} level=\"h5\" component=\"h1\">\n          <b> Create new contact!</b>\n        </Typography>\n\n        <FormControl>\n          <FormLabel>\n            <PersonOutlineIcon sx={{ fontSize: 20, mr: 3 }} />\n            <Typography sx={{ color: 'red', fontSize: 10 }}>\n              {errors.name && touched.name ? errors.name : null}\n            </Typography>\n          </FormLabel>\n          <Input\n            placeholder=\"name\"\n            name=\"name\"\n            type=\"text\"\n            required\n            onChange={formik.handleChange}\n            value={formik.values.name}\n          />\n        </FormControl>\n        <FormControl>\n          <FormLabel>\n            <TtyIcon sx={{ fontSize: 20, mr: 3 }} />\n            <Typography sx={{ color: 'red', fontSize: 10 }}>\n              {errors.number && touched.number ? errors.number : null}\n            </Typography>\n          </FormLabel>\n          <Input\n            name=\"number\"\n            type=\"tel\"\n            placeholder=\"number\"\n            required\n            onChange={formik.handleChange}\n            value={formik.values.number}\n          />\n        </FormControl>\n        <Button\n          type=\"submit\"\n          size=\"md\"\n          sx={theme => ({\n            background: `linear-gradient(-45deg, ${theme.vars.palette.primary[800]}, ${theme.vars.palette.primary[500]})`,\n            fontWeight: 'lg',\n            '&:hover': {\n              background: `linear-gradient(-45deg, ${theme.vars.palette.primary[900]}, ${theme.vars.palette.primary[600]})`,\n            },\n          })}\n        >\n          Add Contact <AddIcon sx={{ mx: 2 }} />\n        </Button>\n      </Sheet>\n      <ToastContainer />\n    </CssVarsProvider>\n  );\n};\n\nexport default ContactForm;\n\nfunction settingAlert() {\n  return {\n    position: 'top-right',\n    autoClose: 1700,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: false,\n    draggable: true,\n    progress: undefined,\n    theme: 'light',\n  };\n}\n","import Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport Modal from '@mui/material/Modal';\nimport { FormControl, IconButton, Input, InputLabel } from '@mui/material';\nimport BorderColorIcon from '@mui/icons-material/BorderColor';\nimport { useDispatch } from 'react-redux';\nimport Loader from 'components/Loader/Loader';\nimport { updateContact } from 'redux/contacts/contactsOperations';\n\nexport default function UpdateModal({ openModal, handleClose, contactObj }) {\n  const dispatch = useDispatch();\n  const onUpdateContact = e => {\n    e.preventDefault();\n    const id = contactObj.id;\n    const name = e.target.name.value.trim();\n    const number = e.target.number.value.trim();\n\n    dispatch(updateContact({ id, name, number }));\n    handleClose();\n  };\n\n  return (\n    <Modal\n      open={openModal}\n      onClose={handleClose}\n      aria-labelledby=\"modal-modal-title\"\n      aria-describedby=\"modal-modal-description\"\n    >\n      <Box sx={style()} component=\"form\" onSubmit={onUpdateContact}>\n        <Typography sx={{ mb: 2 }} level=\"h6\" color=\"primary\" component=\"h2\">\n          <b> Edit contact</b>\n        </Typography>\n\n        {!contactObj ? (\n          <Loader />\n        ) : (\n          <Box>\n            <FormControl variant=\"standard\">\n              <InputLabel htmlFor=\"name\">Name</InputLabel>\n              <Input\n                id=\"name\"\n                defaultValue={contactObj?.name}\n                name=\"name\"\n                type=\"text\"\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                required\n              />\n            </FormControl>\n            <FormControl variant=\"standard\" sx={{ mx: 2 }}>\n              <InputLabel htmlFor=\"number\">Number</InputLabel>\n              <Input\n                id=\"number\"\n                defaultValue={contactObj.number}\n                name=\"number\"\n                type=\"tel\"\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                required\n              />\n            </FormControl>\n            <IconButton color=\"primary\" aria-label=\"edit\" type=\"submit\">\n              <BorderColorIcon sx={{ fontSize: 30 }} />\n            </IconButton>\n          </Box>\n        )}\n      </Box>\n    </Modal>\n  );\n}\n\nfunction style() {\n  return {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: 450,\n    bgcolor: 'background.paper',\n    border: '2px solid #000',\n    boxShadow: 24,\n    p: 4,\n  };\n}\n","import { Box } from '@mui/system';\nimport { useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PersonOutlinedIcon from '@mui/icons-material/PersonOutlined';\nimport ModeEditOutlinedIcon from '@mui/icons-material/ModeEditOutlined';\nimport RemoveCircleOutlineOutlinedIcon from '@mui/icons-material/RemoveCircleOutlineOutlined';\nimport { IconButton, Typography } from '@mui/material';\nimport { Sheet } from '@mui/joy';\nimport UpdateModal from 'components/UpdateModal/UpdateModal';\nimport { removeOneContact } from 'redux/contacts/contactsOperations';\nimport Loader from 'components/Loader/Loader';\nimport {\n  selectContacts,\n  selectFilter,\n  selectLoadingContacts,\n} from 'redux/contacts/contactsSlice';\n\nconst ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const isLoading = useSelector(selectLoadingContacts);\n  const dispatch = useDispatch();\n\n  const [openModal, setOpenModal] = useState(false);\n  const [contactObj, setUserDataModal] = useState(null);\n\n  const handleOpen = objContact => {\n    setUserDataModal(objContact);\n    setOpenModal(true);\n  };\n\n  const handleClose = () => {\n    setOpenModal(false);\n    setUserDataModal(null);\n  };\n\n  const filterContacts = useMemo(() => {\n    return contacts.filter(el => el.name.toLowerCase().includes(filter));\n  }, [filter, contacts]);\n\n  return (\n    <>\n      <Box component=\"ul\">\n        {isLoading ? (\n          <Loader />\n        ) : (\n          filterContacts.map(({ id, name, number }) => (\n            <Sheet\n              key={id}\n              component=\"li\"\n              sx={{\n                width: 520,\n                mx: 'auto',\n                my: 1,\n                py: 1,\n                px: 2,\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'space-between',\n                gap: 1,\n                borderRadius: 'sm',\n                boxShadow: 'sx',\n                position: 'relative',\n              }}\n              variant=\"outlined\"\n            >\n              <PersonOutlinedIcon />\n              <Box\n                sx={{\n                  display: 'flex',\n                  alignItems: 'center',\n\n                  // добавити медіазапит !!!\n                  //\n                }}\n              >\n                <Typography\n                  level=\"h6\"\n                  component=\"p\"\n                  sx={{\n                    width: 220,\n                    textAlign: 'center',\n                    textTransform: 'capitalize',\n                  }}\n                >\n                  <b>{name}</b>:\n                </Typography>\n                <Typography\n                  level=\"p\"\n                  component=\"p\"\n                  sx={{\n                    width: 170,\n                  }}\n                >\n                  {number}\n                </Typography>\n              </Box>\n              <div>\n                <IconButton\n                  color=\"primary\"\n                  aria-label=\"delete\"\n                  onClick={() => {\n                    handleOpen({ id, name, number });\n                  }}\n                >\n                  <ModeEditOutlinedIcon />\n                </IconButton>\n                <IconButton\n                  color=\"primary\"\n                  aria-label=\"delete\"\n                  onClick={() => dispatch(removeOneContact(id))}\n                >\n                  <RemoveCircleOutlineOutlinedIcon />\n                </IconButton>\n              </div>\n            </Sheet>\n          ))\n        )}\n      </Box>\n      {openModal && (\n        <UpdateModal\n          contactObj={contactObj}\n          openModal={openModal}\n          handleClose={handleClose}\n        />\n      )}\n    </>\n  );\n};\n\nexport default ContactList;\n","import Filter from '../../components/Filter/Filter';\nimport ContactForm from '../../components/ContactForm/ContactForm';\nimport ContactList from '../../components/ContactList/ContactList';\nimport { useRouteRedirect } from 'hooks/useRouteRedirect';\nimport routes from 'constants/routes';\nimport { useEffect } from 'react';\nimport { fetchAllContacts } from 'redux/contacts/contactsOperations.js';\nimport { useDispatch } from 'react-redux';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchAllContacts());\n  }, [dispatch]);\n\n  useRouteRedirect(false, routes.home);\n  return (\n    <>\n      <ContactForm />\n      <Filter />\n      <ContactList />\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["useRouteRedirect","statusBool","pathName","navigate","useNavigate","authStatus","useSelector","selectAuthStatus","useEffect","replace","dispatch","useDispatch","CssVarsProvider","FormControl","sx","width","mx","my","py","px","display","flexDirection","gap","borderRadius","boxShadow","variant","FormLabel","PersonSearch","fontSize","Input","onInput","e","value","target","trim","toLowerCase","changeFilterValue","type","placeholder","pattern","required","SignupSchema","Yup","shape","name","min","max","matches","number","typeError","positive","integer","contacts","selectContacts","formik","useFormik","initialValues","validationSchema","onSubmit","values","foundEl","find","el","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","addOneContact","resetForm","errors","touched","Sheet","handleSubmit","component","Typography","level","PersonOutline","mr","color","onChange","handleChange","Tty","Button","size","background","vars","palette","primary","fontWeight","Add","UpdateModal","openModal","handleClose","contactObj","Modal","open","onClose","top","left","transform","bgcolor","border","p","preventDefault","id","updateContact","mb","InputLabel","htmlFor","defaultValue","IconButton","BorderColor","Loader","filter","selectFilter","isLoading","selectLoadingContacts","useState","setOpenModal","setUserDataModal","filterContacts","useMemo","includes","Box","map","alignItems","justifyContent","PersonOutlined","textAlign","textTransform","onClick","ModeEditOutlined","removeOneContact","RemoveCircleOutlineOutlined","fetchAllContacts","routes"],"sourceRoot":""}